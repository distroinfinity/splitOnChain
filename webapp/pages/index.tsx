import Head from "next/head";
import { useEffect, useState } from "react";
import { Inter } from "next/font/google";
import { Auth } from "@polybase/auth";
import { ethPersonalSignRecoverPublicKey } from "@polybase/eth";
import { Polybase } from "@polybase/client";
import { useCollection } from "@polybase/react";

const db = new Polybase({
  defaultNamespace:
    "pk/0xf699df4b2989f26513d93e14fd6e0befd620460546f3706a4e35b10ac3838457a031504254ddac46f6519fcf548ec892cc33043ce74c5fa9018ef5948a685e1d/splitonchain",
});

// const auth = typeof window !== "undefined" ? new Auth() : null;

export default function Home() {
  const [user, setUser] = useState();
  const [userAddress, setUserAddress] = useState<string | null>(null);
  async function getPublicKey() {
    return "0x20A8f7eee66bE17110845413Bac91Fa66e0A8DA8";
  }

  const createUser = async () => {
    const address = await getPublicKey();
    console.log("address", address);
    // Create user if not exists
    let user;
    try {
      user = await db.collection("User").record(address).get();
      console.log("User Already exists", user);
    } catch (e) {
      // .create() accepts two params, address and name of user
      // populate these dynamically with address and name of user
      user = await db.collection("User").create([address, "Yash"]);
      console.log("User created", user);
    }
    console.log("user is ", user);
    setUser(user.data.name);
  };

  const addGroup = async () => {
    // create a new Group
    let group;
    try {
      group = await db
        .collection("Group")
        .create(["testGroupIdFinal", "Trip", "owenerAddress"]);
      console.log("Group created", group);
    } catch (error) {
      console.log("error creating new group", error);
      return;
    }
    let id = group.data.id;

    // add groupId to user table
    try {
      const recordData = await db
        .collection("User")
        .record(
          "0x20A8f7eee66bE17110845413Bac91Fa66e0A8DA8" // id of entry to be updated
        )
        .call("addGroup", [id]); // hardcoded group id

      console.log("added group to user table", recordData);
    } catch (error) {
      console.log("Error adding ggroup", error);
    }
  };

  const addMember = async () => {
    try {
      const recordData = await db
        .collection("Group")
        .record(
          "0x20A8f7eee66bE17110845413Bac91Fa66e0A8DA8" // id of entry to be updated
        )
        .call("addMember", ["testGroupIdFinal"]);

      console.log("added member to group", recordData);
    } catch (error) {
      console.log("Error adding member", error);
    }
  };

  return (
    <>
      <Head>
        <title>Split On Chain</title>
        {/* <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      Hello World
      <div>
        {user ? (
          <p>User is {user}</p>
        ) : (
          <button onClick={createUser}>Create user</button>
        )}
        <button onClick={addGroup}>Add Group</button>
      </div>
    </>
  );
}
